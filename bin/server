#!/usr/bin/env node
const yargs = require('yargs/yargs')
const { spawn } = require('child_process')
const express = require('express')
const bodyParser = require('body-parser')
const serveIndex = require('serve-index')
const path = require('path')
const app = express()
const dir = path.join(__dirname, '..')

app.use(bodyParser.text())

app.get('/succeed', (req, res) => res.status(200).send('hello world.'))
app.get('/fail', (req, res) => res.status(404).send('Good bye world.'))
app.get('/error', (req, res) => res.status(500).send('error world.'))
app.get('/request', processRequest)
app.post('/request', processRequest)
app.put('/request', processRequest)
app.patch('/request', processRequest)
app.delete('/request', processRequest)

// This line needs to be at the end, otherwise it will block any method different than GET
app.use(express.static(dir), serveIndex(dir, { icons: true, view: 'details' }))

const ip = '127.0.0.1'
const port = 8000
const url = `http://${ip}:${port}/`
const { argv } = yargs(process.argv.slice(2))

function processRequest (req, res) {
  const headers = {}
  const isDelete = req.method === 'DELETE'

  for (const key in req.headers) {
    const value = req.headers[key]
    headers[key] = Array.isArray(value) ? value[0] : value
  }

  res.set('Date', 'Sat, 23 Sep 2017 15:41:16 GMT-0300')

  res.json({
    method: req.method,
    headers,
    body: isDelete ? '' : req.body
  })
}

function processFileUrl (args) {
  const fileParamIndex = args.indexOf('-f')

  if (fileParamIndex > 0) {
    const fileIndex = fileParamIndex + 1
    args[fileIndex] = args[fileIndex].replace(/^\.\//, url)
  }

  return args
}

const server = app.listen(port, ip, () => {
  if (!argv.silent) {
    console.log(`Test server listening at ${url}`)
  }

  if (argv.exec) {
    const args = processFileUrl(argv.exec.split(' '))
    const command = args[0]
    const params = args.slice(1)
    const child = spawn(command, params, {
      env: {
        ...process.env,
        FORCE_COLOR: true // ensure mocha outputs colors on node test
      }
    })

    child.stdout.pipe(process.stdout)
    child.stderr.pipe(process.stdout)

    if (argv.closeOnExec) {
      child.on('exit', code => {
        server.close()
        process.exit(code)
      })
    }
  }
})
